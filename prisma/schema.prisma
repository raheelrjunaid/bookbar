// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["referentialIntegrity"]
}

datasource db {
  provider             = "mysql"
  url                  = env("DATABASE_URL")
  referentialIntegrity = "prisma"
}

// Collection of Books with a Google Books ID such as "_gA_DwAAQBAJ"
// Book Ids are stored as JSON since MySQL does not support arrays
model Collection {
  id           String   @id @default(cuid())
  title        String
  description  String?  @db.Text
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  user         User     @relation(fields: [userId], references: [id])
  userId       String
  ratings      Rating[]
  favouritedBy User[]   @relation("FavouriteCollections")
  books        Book[]
}

model Book {
  id          String       @id
  title       String
  authors     String?
  description String?      @db.Text
  cover       String?
  avgRating   Float?
  link        String?
  collections Collection[]
}

model Rating {
  id           String     @id @default(cuid())
  rating       Float
  user         User       @relation(fields: [userId], references: [id])
  userId       String
  collection   Collection @relation(fields: [collectionId], references: [id])
  collectionId String
}

model User {
  id                   String       @id @default(cuid())
  name                 String
  email                String       @unique
  emailVerified        DateTime?
  image                String?
  slug                 String?      @unique // Potential bug
  accounts             Account[]
  sessions             Session[]
  collections          Collection[]
  rating               Rating[]
  favouriteCollections Collection[] @relation("FavouriteCollections")
}

// Necessary for Next auth
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
